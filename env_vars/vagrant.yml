---

# Security settings.

# To run the Security module and disable root login access
# you must change this to something else, like:
server_user_name: "{{ application_name }}"
# server_user_name: root

# You can use the following Python script to adjust this value.
# pip install passlib
# python -c "from passlib.hash import sha512_crypt; import getpass; print sha512_crypt.encrypt(getpass.getpass())"
server_user_password: $6$rounds=656000$etJz1GRgCu9jhIPe$Tj0UzTwuxPvSst4I2kNwUpSWRGCCpu0KCiplwbbv6cZteNQYJ8xpbIw0ufUiZ59FWMhfJDLTCTSq.p93QYdeq0

run_aptitude_safe_upgrade: yes


# Git settings.
setup_git_repo: yes
git_branch: master


# Database settings.
db_user: "{{ application_name }}"
db_name: "{{ application_name }}"
db_password: password


# Gunicorn settings. For the number of workers, a good rule to follow is
# 2 x number of CPUs + 1
gunicorn_num_workers: 3

# Setting this to 1 will restart the Gunicorn process each time
# you make a request, basically reloading the code. Very handy
# when developing. Set to 0 for unlimited requests (default).
gunicorn_max_requests: 0

gunicorn_timeout_seconds: 300


# Nginx settings.
nginx_server_name: 192.168.33.15
nginx_strong_dh_group: no


# RabbitMQ settings.
rabbitmq_server_name: "{{ inventory_hostname }}"

rabbitmq_admin_user: admin
rabbitmq_admin_password: password

rabbitmq_application_vhost: "{{ application_name }}"
rabbitmq_application_user: "{{ application_name }}"
rabbitmq_application_password: password


# Celery settings.
celery_num_workers: 2
flower_admin_password: password


# Application settings.
django_settings_file: "{{ application_name }}.settings.local"
django_secret_key: "akr2icmg1n8%z^3fe3c+)5d0(t^cy-2_25rrl35a7@!scna^1#"

broker_url: "amqp://{{ rabbitmq_application_user }}:{{ rabbitmq_application_password }}@localhost/{{ rabbitmq_application_vhost }}"

run_django_db_migrations: yes
run_django_collectstatic: yes